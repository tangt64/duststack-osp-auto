- name: install packages
  tags: packages
  yum: 
    name: ['openstack-neutron','openstack-neutron-ml2','openstack-neutron-lbaas','python-neutronclient','ebtables','ipset','openstack-neutron-linuxbridge']
    state: latest

- name: install configurations
  tags: config
  template: 
    src: neutron.conf.j2 
    dest: /etc/neutron/neutron.conf
- template: 
    src: ml2_conf.ini.j2 
    dest: /etc/neutron/plugins/ml2/ml2_conf.ini

- block:
#  tags: config

  - template: 
      src: linuxbridge_agent.ini.j2 
      dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
  - copy: 
      src: l3_agent.ini 
      dest: /etc/neutron/l3_agent.ini
  - copy: 
      src: dhcp_agent.ini 
      dest: /etc/neutron/dhcp_agent.ini
  - template: 
      src: neutron_lbaas.conf.j2 
      dest: /etc/neutron/neutron_lbaas.conf
  - template: 
      src: metadata_agent.ini.j2 
      dest: /etc/neutron/metadata_agent.ini
  - file: 
      src: /etc/neutron/plugins/ml2/ml2_conf.ini 
      dest: /etc/neutron/plugin.ini 
      state: link
  - copy: 
      src: dnsmasq-neutron.conf 
      dest: /etc/neutron/dnsmasq-neutron.conf
  when: not ansible_check_mode

- block:
  - name: copy db create template
    template: 
      src: neutrondb.sql.j2 
      dest: /tmp/neutrondb.sql

  - name: create database
    shell : mysql -u root < /tmp/neutrondb.sql

  # - name: remove sql
  #   file: path=/tmp/neutrondb.sql state=absent

  - name: list users
    command: "openstack user list"
    register: ulist

  - block:
      - command: "openstack user create --domain default --password {{ neutron_password }} neutron"
      - command: "openstack role add --project service --user neutron admin"
      - command: "openstack service create --name neutron --description 'OpenStack Networking' network"
      - command: "openstack endpoint create --region RegionOne network {{ item }} http://{{ internal_vip_address|default(groups['controller'][0]) }}:9696"
        with_items:
          - internal
          - public
          - admin
    when: not ansible_check_mode and ulist.stdout.find("neutron") < 0

  - name: bootstrap database
    command: neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head
    become: true
    become_user: neutron
    when: not ansible_check_mode
  run_once: true

- name: start services
  tags: service
  systemd: 
    name: "{{ item }}"
    state: restarted 
    enabled: yes
  when: not ansible_check_mode
  with_items:
    - openstack-nova-api
    - neutron-server
    - neutron-linuxbridge-agent
    - neutron-dhcp-agent
    - neutron-metadata-agent
    - neutron-l3-agent

- block:
  - name: list networks
    command: "neutron net-list"
    register: ulist

  - block:
    - command: "openstack network create --share --provider-physical-network {{ provider_network }} --provider-network-type flat {{ provider_network }} --external"
    - command: "openstack subnet create  --allocation-pool {{ provider_allocation_pool }} --dns-nameserver {{ provider_nameserver }} --gateway {{ provider_gateway }} --network {{ provider_network }} --subnet-range {{ provider_network_cidr }} {{ provider_network }}"
    - command: "openstack network create {{ selfservice_network }}"
    - command: "openstack subnet create --dns-nameserver {{ selfservice_nameserver }} --gateway {{ selfservice_gateway }} --network {{ selfservice_network }} --subnet-range {{ selfservice_network_cidr }} {{ selfservice_network }}"
    - command: "openstack router create router"
    - command: "openstack router add subnet router {{ selfservice_network }}"
    - command: "openstack router set --external-gateway {{ provider_network }} router "
    tags: net
    become: true
    become_user: neutron
    when: not ansible_check_mode and ulist.stdout.find("private") < 0
  run_once: true
